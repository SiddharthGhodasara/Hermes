<launch>

 <arg name="gui" default="True" />
	<param name="use_gui" value="$(arg gui)"/>
	<param name="robot_description"
        command="$(find xacro)/xacro.py '$(find robot_description)/urdf/robot.xacro'"/>
	
	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
	
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher">
         <param name="publish_frequency" type="double" value="30.0" />
   <param name="use_tf_static" type="bool" value="false" />	
       </node>

       <node name="serial_node" pkg="rosserial_python" type="serial_node.py">
		<param name="port" value="/dev/ttyACM0"/>
	</node>

        <node name="base" pkg="robot_controller" type="base">
       </node>

       <node name="rplidarNode"          pkg="rplidar_ros"  type="rplidarNode" output="screen">
  <param name="serial_port"         type="string" value="/dev/ttyUSB0"/>
  <param name="serial_baudrate"     type="int"    value="115200"/><!--A1/A2 -->
  <!--param name="serial_baudrate"     type="int"    value="256000"--><!--A3 -->
  <param name="frame_id"            type="string" value="laser"/>
  <param name="inverted"            type="bool"   value="false"/>
  <param name="angle_compensate"    type="bool"   value="true"/>
  </node>

 <!-- IMU relay from linorobot_msgs/Imu to sensor_msgs/Imu -->
    <!-- IMU relay from linorobot_msgs/Imu to sensor_msgs/Imu -->
   <!-- <node pkg="imu_calib" type="apply_calib" name="apply_calib" output="screen" respawn="false">
        <param name="calib_file" value="$(find robot_bringup)/param/imu/imu_calib.yaml" />
        <param name="calibrate_gyros" value="true" />
    </node>-->

    <!-- Filter and fuse raw imu data -->
    <!--<node pkg="imu_filter_madgwick" type="imu_filter_node" name="imu_filter_madgwick" output="screen" respawn="false" >
        <param name="fixed_frame" value="base_link" />
        <param name="use_mag" value="true" />
        <param name="publish_tf" value="false" />
        <param name="use_magnetic_field_msg" value="true" /> 
        <param name="world_frame" value="enu" />
        <param name="orientation_stddev" value="0.05" />
    </node>-->

    <!--<node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization"> 
        <remap from="odometry/filtered" to="odom" />
        <rosparam command="load" file="$(find robot_bringup)/param/ekf/robot_localization.yaml" />
    </node>-->

 <!-- Publish static transform from base_footprint to imu_link -->
  <!--<node pkg="tf2_ros" type="static_transform_publisher" name="base_footprint_to_imu_link" args="0 0 0 0 0 0  /base_footprint /imu_link"/>-->

 <!--<node pkg="tf2_ros" type="static_transform_publisher" name="base_footprint_to_base_link" args="0 0 0 0 0 0  /base_footprint /base_link"/>-->

</launch>
